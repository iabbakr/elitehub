rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for Admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'devabu01@gmail.com';
    }

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user owns a provider document
    function isProviderOwner(collectionName, providerId) {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/$(collectionName)/$(providerId)) &&
             get(/databases/$(database)/documents/$(collectionName)/$(providerId)).data.uid == request.auth.uid;
    }

    // Users can only read and write their own data
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn();
    }

    // Products can be read by anyone, but only created/updated/deleted by the vendor owner or admin
    match /products/{productId} {
      allow read: if true;
      allow create: if isSignedIn() && 
                       exists(/databases/$(database)/documents/vendors/$(request.resource.data.vendorId)) &&
                       get(/databases/$(database)/documents/vendors/$(request.resource.data.vendorId)).data.uid == request.auth.uid;
      allow update, delete: if isSignedIn() && 
                               (get(/databases/$(database)/documents/products/$(productId)).data.vendorId == request.auth.uid || isAdmin());

      // Reviews and replies
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && 
                                 (get(/databases/$(database)/documents/products/$(productId)/reviews/$(reviewId)).data.userId == request.auth.uid || isAdmin());

        match /replies/{replyId} {
          allow read: if true;
          allow create: if isSignedIn();
          allow update, delete: if isSignedIn() && 
                                   (get(/databases/$(database)/documents/products/$(productId)/reviews/$(reviewId)/replies/$(replyId)).data.userId == request.auth.uid || isAdmin());
        }
      }
    }

    // Vendors
    match /vendors/{vendorId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isProviderOwner('vendors', vendorId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Lawyers
    match /lawyers/{lawyerId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isProviderOwner('lawyers', lawyerId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Logistics Companies
    match /logisticsCompanies/{companyId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isProviderOwner('logisticsCompanies', companyId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Currency Exchange Agents
    match /currencyExchangeAgents/{agentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isProviderOwner('currencyExchangeAgents', agentId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Service Providers
    match /serviceProviders/{providerId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isProviderOwner('serviceProviders', providerId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Application collections
    match /vendorApplications/{appId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }
    
    match /lawyerApplications/{appId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }
    
    match /logisticsApplications/{appId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }
    
    match /currencyExchangeApplications/{appId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }
    
    match /serviceProviderApplications/{appId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    // Chats are private between participants
    match /chats/{chatRoomId} {
      allow read, write: if isSignedIn() && 
                            exists(/databases/$(database)/documents/chats/$(chatRoomId)) &&
                            request.auth.uid in get(/databases/$(database)/documents/chats/$(chatRoomId)).data.participantIds;
      
      match /messages/{messageId} {
        allow read, write: if isSignedIn() && 
                             exists(/databases/$(database)/documents/chats/$(chatRoomId)) &&
                             request.auth.uid in get(/databases/$(database)/documents/chats/$(chatRoomId)).data.participantIds;
      }
    }
    
    // Notifications are private to the recipient
    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && 
                                     exists(/databases/$(database)/documents/notifications/$(notificationId)) &&
                                     isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientId);
      allow create: if isSignedIn();
    }
    
    // Transactions can be read by the related provider or an admin
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && 
                     exists(/databases/$(database)/documents/transactions/$(transactionId)) &&
                     (isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.vendorId) || isAdmin());
      allow create: if isSignedIn(); // Allow authenticated users to create transactions
      allow update, delete: if isAdmin();
    }
  }
}