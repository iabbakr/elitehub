
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'admin@elitehub.com';
    }
    
    // Helper function to check if user is the owner of a document
    function isOwner(resourceId) {
      return request.auth.uid == resourceId;
    }
    
    // Helper function to get a provider document by UID
    function getProvider(collectionName, uid) {
        return get(/databases/$(database)/documents/$(collectionName)/$(uid));
    }
    
    // Users collection rules
    match /users/{userId} {
      // Anyone can create their own user document (on signup)
      allow create: if request.auth.uid == userId;
      // Users can only read/update their own data, admins can read any
      allow read, update: if isOwner(userId) || isAdmin();
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Generic rules for provider applications
    match /{appCollection}/{appId} where appCollection in ['vendorApplications', 'lawyerApplications', 'logisticsApplications', 'currencyExchangeApplications', 'serviceProviderApplications'] {
      // Logged-in users can create applications for themselves
      allow create: if request.auth.uid == request.resource.data.uid;
      // Only admins can manage applications
      allow read, update, delete: if isAdmin();
    }
    
    // Generic rules for all provider types
    match /{providerCollection}/{providerId} where providerCollection in ['vendors', 'lawyers', 'logisticsCompanies', 'currencyExchangeAgents', 'serviceProviders'] {
      // Anyone can read public provider profiles
      allow read: if true;
      // Admins can create providers (manual approval)
      allow create: if isAdmin();
      // Owner of the profile or an admin can update
      allow update: if isOwner(resource.data.uid) || isAdmin();
      // Only admins can delete
      allow delete: if isAdmin();
    }

    // Products collection rules
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      // Vendor can create product if they own the vendor profile
      allow create: if get(/databases/$(database)/documents/vendors/$(request.resource.data.vendorId)).data.uid == request.auth.uid;
      // Vendor can update/delete their own products, or an admin can
      allow update, delete: if get(/databases/$(database)/documents/vendors/$(resource.data.vendorId)).data.uid == request.auth.uid || isAdmin();

      // Rules for reviews subcollection
      match /reviews/{reviewId} {
        // Anyone can read reviews
        allow read: if true;
        // Any authenticated user can create a review
        allow create: if request.auth != null;
        // Only the author or an admin can update/delete
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        
        // Rules for replies subcollection within a review
        match /replies/{replyId} {
          allow read: if true;
          // Authenticated users can reply
          allow create: if request.auth != null;
          // Only the author or an admin can update/delete
          allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      // Only the recipient can read/update their notification
      allow read, update: if isOwner(resource.data.recipientId);
      // Server-side logic or trusted clients create notifications, so no client-side create rule needed for security.
      // Admin can delete if necessary
      allow delete: if isAdmin();
      allow create: if request.auth != null; // Allow creation from server functions or authenticated users for now
    }
    
    // Chat collection rules
    match /chats/{chatRoomId} {
      // Only participants of the chat can read/write the chat room document
      allow read, update, create: if request.auth.uid in resource.data.participantIds;
      
      // Messages subcollection rules
      match /messages/{messageId} {
        // Only participants can read messages
        allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatRoomId)).data.participantIds;
        // Only participants can send messages
        allow create: if request.auth.uid == request.resource.data.senderId && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatRoomId)).data.participantIds;
      }
    }
    
    // Transaction history rules
    match /transactions/{transactionId} {
        // Only admins can read all transactions. Specific user/vendor access should be handled by backend queries.
        allow read, delete: if isAdmin();
        // Transactions should be created server-side after payment verification.
        allow create: if request.auth != null;
    }
  }
}
